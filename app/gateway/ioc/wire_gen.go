// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package ioc

import (
	"github.com/crazyfrankie/cloudstorage/app/gateway/api"
	"github.com/crazyfrankie/cloudstorage/app/gateway/mws"
	"github.com/gin-gonic/gin"
	"go.etcd.io/etcd/client/v3"
	"time"
)

// Injectors from wire.go:

func InitServer() *gin.Engine {
	v := InitMws()
	client := InitRegistry()
	userServiceClient := InitUserClient(client)
	userHandler := api.NewUserHandler(userServiceClient)
	fileServiceClient := InitFileClient(client)
	fileHandler := api.NewFileHandler(fileServiceClient)
	engine := InitGin(v, userHandler, fileHandler)
	return engine
}

// wire.go:

func InitRegistry() *clientv3.Client {
	cli, err := clientv3.New(clientv3.Config{
		Endpoints:   []string{"localhost:2379"},
		DialTimeout: time.Second * 5,
	})
	if err != nil {
		panic(err)
	}

	return cli
}

func InitMws() []gin.HandlerFunc {
	return []gin.HandlerFunc{mws.NewAuthBuilder().
		IgnorePath("/api/user/send-code").
		IgnorePath("/api/user/verify-code").
		Auth(),
	}
}

func InitGin(mws2 []gin.HandlerFunc, user *api.UserHandler, file *api.FileHandler) *gin.Engine {
	server := gin.Default()
	server.Use(mws2...)

	user.RegisterRoute(server)
	file.RegisterRoute(server)

	return server
}
