// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package ioc

import (
	"github.com/crazyfrankie/cloudstorage/app/sm/biz/repository"
	"github.com/crazyfrankie/cloudstorage/app/sm/biz/repository/cache"
	"github.com/crazyfrankie/cloudstorage/app/sm/biz/service"
	"github.com/crazyfrankie/cloudstorage/app/sm/biz/service/sms/memory"
	"github.com/crazyfrankie/cloudstorage/app/sm/config"
	"github.com/crazyfrankie/cloudstorage/app/sm/rpc"
	"github.com/redis/go-redis/v9"
	"go.etcd.io/etcd/client/v3"
	"time"
)

// Injectors from wire.go:

func InitServer() *rpc.Server {
	cmdable := InitCache()
	smCache := cache.NewSmCache(cmdable)
	smRepo := repository.NewSmRepo(smCache)
	smsService := memory.NewMemorySmService()
	smServer := service.NewSmServer(smRepo, smsService)
	client := InitRegistry()
	server := rpc.NewServer(smServer, client)
	return server
}

// wire.go:

func InitCache() redis.Cmdable {
	cli := redis.NewClient(&redis.Options{
		Addr: config.GetConf().Redis.Addr,
	})

	return cli
}

func InitRegistry() *clientv3.Client {
	cli, err := clientv3.New(clientv3.Config{
		Endpoints:   []string{config.GetConf().ETCD.Addr},
		DialTimeout: time.Second * 2,
	})
	if err != nil {
		panic(err)
	}

	return cli
}
