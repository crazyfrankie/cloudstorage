// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package ioc

import (
	"github.com/crazyfrankie/cloudstorage/app/gateway/api"
	"github.com/gin-contrib/cors"
	"github.com/gin-gonic/gin"
	"go.etcd.io/etcd/client/v3"
	"go.opentelemetry.io/contrib/instrumentation/github.com/gin-gonic/gin/otelgin"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/propagation"
	"time"
)

// Injectors from wire.go:

func InitServer() *gin.Engine {
	v := InitMws()
	client := InitRegistry()
	userServiceClient := InitUserClient(client)
	userHandler := api.NewUserHandler(userServiceClient)
	fileServiceClient := InitFileClient(client)
	fileHandler := api.NewFileHandler(fileServiceClient)
	connectionManager := api.NewConnectionManager()
	syncHandler := api.NewSyncHandler(connectionManager)
	engine := InitGin(v, userHandler, fileHandler, syncHandler)
	return engine
}

// wire.go:

func InitRegistry() *clientv3.Client {
	cli, err := clientv3.New(clientv3.Config{
		Endpoints:   []string{"localhost:2379"},
		DialTimeout: time.Second * 5,
	})
	if err != nil {
		panic(err)
	}

	return cli
}

func InitMws() []gin.HandlerFunc {
	tp := initTracerProvider("cloud-storage/gateway")
	otel.SetTracerProvider(tp)
	otel.SetTextMapPropagator(propagation.NewCompositeTextMapPropagator(propagation.TraceContext{}, propagation.Baggage{}))
	return []gin.HandlerFunc{cors.New(cors.Config{
		AllowOrigins:     []string{"http://localhost:8081"},
		AllowMethods:     []string{"GET", "POST", "PUT", "DELETE", "OPTIONS"},
		AllowHeaders:     []string{"Origin", "Content-Type", "Authorization"},
		ExposeHeaders:    []string{"Content-Length", "x-jwt-token"},
		AllowCredentials: true,
		MaxAge:           12 * time.Hour,
	}), otelgin.Middleware("cloudstorage/gateway"),
	}
}

func InitGin(mws []gin.HandlerFunc, user *api.UserHandler, file *api.FileHandler, sync *api.SyncHandler) *gin.Engine {
	server := gin.Default()
	server.MaxMultipartMemory = 100 * 1024 * 1024
	server.Use(mws...)

	user.RegisterRoute(server)
	file.RegisterRoute(server)
	sync.RegisterRoute(server)

	return server
}
